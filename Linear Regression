import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from math import sqrt

# Taking the number of data points as input
n = int(input("Enter the number of data points: "))

# Initializing lists to store the data
X = []
y = []

# Taking user input for independent (X) and dependent (y) variables
for i in range(n):
    x_value = float(input(f"Enter value of X for data point {i+1}: "))
    y_value = float(input(f"Enter value of Y for data point {i+1}: "))
    X.append([x_value])  # X needs to be in 2D array shape
    y.append(y_value)

# Converting lists to numpy arrays
X = np.array(X)
y = np.array(y)

# Creating a linear regression model
model = LinearRegression()

# Fitting the model to the data
model.fit(X, y)

# Get the slope (m) and intercept (b)
m = model.coef_[0]
b = model.intercept_

# Display the regression equation
print(f"\nRegression equation: y = {m:.2f}x + {b:.2f}")

# Calculating accuracy (R-squared)
accuracy = model.score(X, y)

# Making predictions
y_pred = model.predict(X)

# Calculating Mean Squared Error (MSE)
mse = mean_squared_error(y, y_pred)

# Calculating Root Mean Squared Error (RMSE)
rmse = sqrt(mse)

# Ask for new value of X to predict corresponding Y
x_new = float(input("\nEnter a new value of X to predict Y: "))
y_new_pred = model.predict([[x_new]])

# Output the results
print(f"\nPredicted Y value for X = {x_new}: {y_new_pred[0]:.2f}")
print(f"Accuracy (R-squared): {accuracy:.4f}")
print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")

# Plotting the graph
plt.scatter(X, y, color='blue', label='Data points')  # Scatter plot of the data
plt.plot(X, y_pred, color='red', label='Regression line')  # Line of best fit
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Simple Linear Regression')
plt.legend()
plt.show()
